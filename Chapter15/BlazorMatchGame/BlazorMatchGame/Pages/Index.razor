@page "/"
@using System.Timers

<style>
    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>

<div class="container">
    <div class="row">
        @for (var i = 0; i < shuffledAnimals.Count; i++)
        {
            var animal = shuffledAnimals[i];
            var uniqueDescription = $"Button #{i}";
            <div class="col-3">
                <button @onclick="@(() => ButtonClick(animal, uniqueDescription))"
                        type="button" class="btn btn-outline-dark">
                    <h1>@animal</h1>
                </button>
            </div>
        }
    </div>
    <div class="row">
        <h2>Matches found: @matchesFound</h2>
    </div>
    <div class="row">
        <h2>Time: @timeDisplay</h2>
    </div>
</div>

@code {
    private readonly List<string> animalEmoji = new List<string>()
    {
            "🐶", "🐶",
            "🐺", "🐺",
            "🐮", "🐮",
            "🦊", "🦊",
            "🐱", "🐱",
            "🦁", "🦁",
            "🐯", "🐯",
            "🐹", "🐹",
        };

    private List<string> shuffledAnimals = new List<string>();
    private string lastAnimalFound = string.Empty;
    private string lastDescription = string.Empty;
    private int matchesFound = 0;
    private Timer timer;
    private int tenthsOfSecondsElapsed = 0;
    private string timeDisplay;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;
        SetupGame();
    }

    private void Timer_Tick(object sender, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed++;
            timeDisplay = (tenthsOfSecondsElapsed / 10F).ToString("0.0s");
            StateHasChanged();
        });
    }

    private void SetupGame()
    {
        Random random = new Random();
        matchesFound = 0;
        tenthsOfSecondsElapsed = 0;
        shuffledAnimals = animalEmoji
            .OrderBy(item => random.Next())
            .ToList();
    }

    private void ButtonClick(string animal, string animalDescription)
    {
        if (animal == lastAnimalFound && animalDescription == lastDescription) return;

        if (lastAnimalFound == string.Empty)
        {
            // First selection of the pair. Remember it.
            lastAnimalFound = animal;
            lastDescription = animalDescription;

            timer.Start();
        }
        else
        {
            if (lastAnimalFound == animal && lastDescription != animalDescription)
            {
                // Match found! Add up matches found.
                matchesFound++;

                // Replace found animals with empty string to hide them.
                shuffledAnimals = shuffledAnimals
                    .Select(a => a.Replace(animal, string.Empty))
                    .ToList();
            }

            // Reset selection.
            lastAnimalFound = string.Empty;
            lastDescription = string.Empty;
        }

        if (!shuffledAnimals.Any(a => a != string.Empty))
        {
            timer.Stop();
            timeDisplay += " - Play Again?";
            SetupGame();
        }
    }
}